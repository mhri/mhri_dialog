> object mget python
    import sys
    import rospy
    import json
    import re
    import time
    from mhri_msgs.srv import ReadData, ReadDataRequest, GetDataList

    return_data = True
    target_variable_name = ''

    if len(args) < 1 and len(args) > 2:
        rospy.logerr('Failed to execute mget... Check your sintax...')
        return
    if len(args) == 2:
        return_type = False
        target_variable_name = args[1]

    start_time = time.time()    # For Debugging

    memory_data_list = {}
    # Read Data List from Memory
    rospy.wait_for_service('social_events_memory/get_data_list')
    read_srv = rospy.ServiceProxy('social_events_memory/get_data_list', GetDataList)
    result = read_srv()
    for i in json.loads(result.data_list).keys():
        memory_data_list[i] = 'social_events_memory'

    rospy.wait_for_service('environmental_memory/get_data_list')
    read_srv = rospy.ServiceProxy('environmental_memory/get_data_list', GetDataList)
    result = read_srv()
    for i in json.loads(result.data_list).keys():
        memory_data_list[i] = 'environmental_memory'

    rospy.wait_for_service('system_events_memory/get_data_list')
    read_srv = rospy.ServiceProxy('system_events_memory/get_data_list', GetDataList)
    result = read_srv()
    for i in json.loads(result.data_list).keys():
        memory_data_list[i] = 'system_events_memory'

    # Parsing input args
    read_single_data = False
    # 인덱싱 태그가 있는지 찾는다.
    index_tag_list = re.findall('\[(.+)\]', args[0])
    if len(index_tag_list) > 1:
        rospy.logwarn('syntax error in mget...')
        return 'undefined'

    # 없으면 싱글 데이터 읽기
    if len(index_tag_list) == 0:
        read_single_data = True

    # 있으면 일단 인덱싱 태그를 없앤 입력 생성
    input_arg_ori = args[0]
    for i in index_tag_list:
        input_arg_ori = input_arg_ori.replace('[%s]'%i, '')

    # 숫자로된 인덱스인가? 아니면 이름으로 된 인덱스인가?
    is_number_index = False
    number_index = -1
    index_name = ''
    index_value = ''

    if not read_single_data:
        split_tags = index_tag_list[0].split(':')

        if len(split_tags) == 1:
            is_number_index = True
            number_index = int(split_tags[0])
        else:
            index_name = split_tags[0]
            index_value = rs.get_uservar('localuser', split_tags[1])

    input_args = input_arg_ori.split('/')
    try:
        rospy.wait_for_service('%s/read_data'%memory_data_list[input_args[0]], timeout=1)
        read_memory = rospy.ServiceProxy('%s/read_data'%memory_data_list[input_args[0]], ReadData)

        req = ReadDataRequest()
        req.perception_name = input_args[0]
        req.query = '{}'
        req.data.append(input_args[1])

        if not is_number_index and not read_single_data:
            req.data.append(index_name)

        response = read_memory(req)
        recv_data = json.loads(response.data)

    except rospy.ServiceException:
        e = sys.exc_info()[0]
        rospy.logerr(e)
        return 'undefined'

    # if recv_data is number then return number format
    if read_single_data:
        try:
            ret_data = int(recv_data[input_args[1]])
            print("%s seconds"%(time.time() - start_time))     # For Debugging

            if not return_type:
                rs.set_uservar('localuser', target_variable_name, ret_data)
                return ''
            else: return ret_data
        except ValueError:
            try:
                ret_data = float(recv_data[input_args[1]])
                print("%s seconds"%(time.time() - start_time))     # For Debugging

                if not return_type:
                    rs.set_uservar('localuser', target_variable_name, ret_data)
                    return ''
                else: return ret_data
            except ValueError:
                ret_data = recv_data[input_key[1]]
                print("%s seconds"%(time.time() - start_time))     # For Debugging

                if not return_type:
                    rs.set_uservar('localuser', target_variable_name, ret_data)
                    return ''
                else: return ret_data
    else:
        if is_number_index:
            ret_data = recv_data[input_args[1]]
            print("%s seconds"%(time.time() - start_time))

            if not return_type:
                rs.set_uservar('localuser', target_variable_name, ret_data[number_index])
                return ''
            else: return ret_data[number_index]
        else:
            ret_data = recv_data[input_args[1]]
            print("RET_TYPE:", ret_data)

            #
            # {u'name':[u'undefined'], u'session_face_id':[u'1150505050']}

            # return ret_data[recv_data[index_name].index(index_value)]
            if ret_data[0] == '':
                print("%s seconds"%(time.time() - start_time))     # For Debugging
                if not return_type:
                    rs.set_uservar('localuser', target_variable_name, 'undefined')
                else: return 'undefined'
            else:
                print("%s seconds"%(time.time() - start_time))

                value_data = ret_data[input_args[1]][ret_data[index_name].index(index_value)]
                if not return_type:
                    rs.set_uservar('localuser', input_args[1], value_data)
                    return ''
                else:
                    return value_data

                # if input_args[0] == 'person_identification' and input_args[1] == 'name':
                #     rs.set_uservar('localuser', 'name', ret_data[0])                
< object


> object mset python
    import rospy
    import json
    from mhri_msgs.srv import WriteData, WriteDataRequest

    if len(args) < 1:
        rospy.logerr('Failed to write social_memory.. Check your sintax...')
        return False

    input_key = args[0]
    input_data = args[1:]

    rospy.wait_for_service('write_data')
    try:
        write_memory = rospy.ServiceProxy('write_data', WriteData)

        write_data = WriteDataRequest()
        write_data.event_name = input_key

        event_split = input_data[0].split(':')
        write_data.event = '{"%s": %s}'%(event_split[0], event_split[1])

        arg_data = {}
        for data in input_data[1:]:
            data_split = data.split(':')
            arg_data[data_split[0]] = data_split[1]

        # print(json.dumps(arg_data))
        write_data.data = json.dumps(arg_data)
        write_data.by = 'dialog'

        write_response = write_memory(write_data)
    except rospy.ServiceException, e:
        rospy.logerr('Service call failed...')
        return False
    return True
< object
